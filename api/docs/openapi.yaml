openapi: 3.1.0
info:
  title: I Embrace Change API
  version: "2025-08-21.2"
  description: |
    REST API for the I Embrace Change platform (MenoTracker, Inner Compass, Change Atlas).
    Auth is Supabase JWT (Bearer). All timestamps ISO-8601. No PHI/PII in analytics payloads.
servers:
  - url: https://api.iembracechange.com
    description: Production
  - url: https://staging.api.iembracechange.com
    description: Staging
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            field: { type: string, nullable: true }
            details: { type: object, additionalProperties: true, nullable: true }
          required: [code, message]
      required: [error]
    AuthSignupRequest:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
        marketing_opt_in: { type: boolean }
      required: [first_name, last_name, email, password]
    AuthLoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
      required: [email, password]
    AuthLoginResponse:
      type: object
      properties:
        access_token: { type: string }
        expires_in: { type: integer }
        token_type: { type: string, enum: [bearer, Bearer] }
        user:
          type: object
          properties:
            id: { type: string, format: uuid }
            email: { type: string, format: email }
          required: [id, email]
      required: [access_token, expires_in, token_type, user]
    Consents:
      type: object
      properties:
        is_of_age: { type: boolean }
        accept_terms: { type: boolean }
        medical_disclaimer_ack: { type: boolean }
        health_processing: { type: boolean }
        deidentified_improvement: { type: boolean }
        share_anon_trends: { type: boolean }
        research_partnerships: { type: boolean }
        marketing_updates: { type: boolean }
        policy_version: { type: string }
        accepted_at: { type: string, format: date-time }
    ProfileResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string, format: email }
        menopause_stage: { type: string, enum: [pre, perimenopause, surgical, post_natural, post_surgical, unsure] }
        plan: { type: string, enum: [free, core, premium] }
        consents: { $ref: "#/components/schemas/Consents" }
      required: [id, email, plan]
    CovariatesUpdate:
      type: object
      properties:
        parity: { type: integer, minimum: 0 }
        age_menarche: { type: integer, minimum: 0 }
        age_final_period: { type: integer, nullable: true }
        hrt_use:
          type: object
          properties:
            status: { type: string, enum: [yes, no, unknown] }
            type: { type: string, nullable: true }
            since: { type: string, format: date, nullable: true }
        contraception: { type: string, nullable: true }
        smoking_status: { type: string, enum: [never, former, current] }
        alcohol_freq: { type: string }
        height_cm: { type: number }
        weight_kg: { type: number }
        surgical_history:
          type: object
          properties:
            hysterectomy: { type: boolean }
            oophorectomy: { type: boolean }
        comorbidities: { type: array, items: { type: string } }
        medications: { type: array, items: { type: string } }
        menopause_stage: { type: string }
        effective_from: { type: string, format: date }
      additionalProperties: false
    DashboardSummary:
      type: object
      properties:
        user_id: { type: string, format: uuid }
        streak_days: { type: integer }
        entries_this_week: { type: integer }
        active_goal:
          type: object
          properties:
            label: { type: string }
            status: { type: string, enum: [on_track, at_risk, off_track] }
    MenoTrackerSymptom:
      type: object
      properties:
        name: { type: string }
        severity: { type: integer, minimum: 0, maximum: 5 }
        notes: { type: string }
    MenoTrackerLifestyle:
      type: object
      properties:
        sleep_hours: { type: number }
        sleep_quality: { type: string }
        hydration_cups: { type: integer }
        movement_minutes: { type: integer }
        alcohol_units: { type: number }
    MenoTrackerReflection:
      type: object
      properties:
        mood: { type: string }
        journal: { type: string }
        helped: { type: array, items: { type: string } }
        hurt: { type: array, items: { type: string } }
    MenoTrackerLog:
      type: object
      properties:
        date: { type: string, format: date }
        symptoms: { type: array, items: { $ref: "#/components/schemas/MenoTrackerSymptom" } }
        lifestyle: { $ref: "#/components/schemas/MenoTrackerLifestyle" }
        reflection: { $ref: "#/components/schemas/MenoTrackerReflection" }
      required: [date]
    InsightsSummary:
      type: object
      properties:
        range:
          type: object
          properties:
            from: { type: string, format: date }
            to: { type: string, format: date }
        top_symptoms:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              avg_severity: { type: number }
              days_reported: { type: integer }
        correlations:
          type: array
          items:
            type: object
            properties:
              factor: { type: string }
              symptom: { type: string }
              direction: { type: string, enum: [positive, negative, none] }
              strength: { type: number }
        streaks:
          type: object
          properties:
            tracking_days: { type: integer }
            best_streak: { type: integer }
        suggestions: { type: array, items: { type: string } }
    ProviderSummaryRequest:
      type: object
      properties:
        range:
          type: object
          properties:
            from: { type: string, format: date }
            to: { type: string, format: date }
          required: [from, to]
        include:
          type: array
          items: { type: string, enum: [top_symptoms, lifestyle_correlations, reflections_brief] }
        format: { type: string, enum: [pdf, html] }
      required: [range, format]
    ProviderSummaryResponse:
      type: object
      properties:
        report_id: { type: string }
        url: { type: string, format: uri }
        expires_at: { type: string, format: date-time }
      required: [report_id, url, expires_at]
    Article:
      type: object
      properties:
        id: { type: string }
        slug: { type: string }
        title: { type: string }
        excerpt: { type: string }
        reading_time_min: { type: integer }
        author:
          type: object
          properties:
            name: { type: string }
        tags: { type: array, items: { type: string } }
        published_at: { type: string, format: date-time }
    TopicsResponse:
      type: object
      properties:
        topics:
          type: array
          items:
            type: object
            properties:
              slug: { type: string }
              name: { type: string }
              article_count: { type: integer }
    NewsletterSubscribe:
      type: object
      properties:
        email: { type: string, format: email }
        source: { type: string }
      required: [email]
    SupportContact:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        subject: { type: string }
        message: { type: string }
        source: { type: string }
      required: [name, email, subject, message]
    AnalyticsEvent:
      type: object
      properties:
        event:
          type: string
          enum:
            - menotracker_log_submitted
            - inform_search
            - inform_filter
            - inform_article_open
            - support_viewed
            - support_click
            - support_contact_submit_success
            - support_contact_submit_error
            - checkout_started
            - checkout_success
            - checkout_error
            - insights_viewed
            - insight_exported
            - summary_email_sent
            - dashboard_viewed
            - quick_action_clicked
            - inner_compass_locked_view
            - inner_compass_upgrade_clicked
            - provider_summary_generated
        timestamp: { type: string, format: date-time }
        properties:
          type: object
          additionalProperties: true
      required: [event, timestamp]
paths:
  /auth/signup:
    post:
      summary: Sign up
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthSignupRequest" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: string, format: uuid }
                  email_verification_sent: { type: boolean }
        "400": { description: Bad Request, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }
  /auth/login:
    post:
      summary: Log in
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AuthLoginRequest" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthLoginResponse" }
        "401": { description: Unauthorized, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }
  /me:
    get:
      summary: Get current profile
      tags: [Profile]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProfileResponse" }
    patch:
      summary: Update profile basics
      tags: [Profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name: { type: string }
                last_name: { type: string }
                menopause_stage: { type: string }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { updated: { type: boolean } } } } } }
    delete:
      summary: Request account deletion
      tags: [Profile]
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id: { type: string }
                  status: { type: string }
  /me/consents:
    put:
      summary: Update consents
      tags: [Profile]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Consents" }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { updated_at: { type: string, format: date-time } } } } } }
  /me/covariates:
    put:
      summary: Upsert covariates
      tags: [Profile]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CovariatesUpdate" }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { updated_at: { type: string, format: date-time } } } } } }
  /dashboard/summary:
    get:
      summary: Get dashboard snapshot
      tags: [Dashboard]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DashboardSummary" }
  /menotracker/logs:
    post:
      summary: Create a daily log
      tags: [MenoTracker]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MenoTrackerLog" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  entry_id: { type: string, format: uuid }
                  saved: { type: boolean }
    get:
      summary: List logs
      tags: [MenoTracker]
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/MenoTrackerLog" }
  /menotracker/logs/{entry_id}:
    patch:
      summary: Update a log
      tags: [MenoTracker]
      parameters:
        - in: path
          name: entry_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { updated: { type: boolean } } } } } }
    delete:
      summary: Delete a log
      tags: [MenoTracker]
      parameters:
        - in: path
          name: entry_id
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }
  /insights/summary:
    get:
      summary: Insights summary
      tags: [Insights]
      parameters:
        - in: query
          name: range
          description: e.g., last_30d
          schema: { type: string }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/InsightsSummary" } } } }
  /insights/report:
    get:
      summary: Generate insights report
      tags: [Insights]
      parameters:
        - in: query
          name: period
          schema: { type: string, example: "2025-07-01..2025-07-31" }
        - in: query
          name: format
          schema: { type: string, enum: [pdf, html] }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_id: { type: string }
                  period:
                    type: object
                    properties:
                      from: { type: string, format: date }
                      to: { type: string, format: date }
                  url: { type: string, format: uri }
                  expires_at: { type: string, format: date-time }
  /insights/provider-summary:
    post:
      summary: Generate provider summary
      tags: [Insights]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProviderSummaryRequest" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProviderSummaryResponse" }
  /inform/articles:
    get:
      summary: List articles
      tags: [Change Atlas]
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: topic
          schema: { type: string }
        - in: query
          name: sort
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  page: { type: integer }
                  page_size: { type: integer }
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Article" }
  /inform/topics:
    get:
      summary: List topics
      tags: [Change Atlas]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TopicsResponse" }
  /inform/articles/{slug}:
    get:
      summary: Get article by slug
      tags: [Change Atlas]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: "#/components/schemas/Article" }
                  - type: object
                    properties:
                      body_html: { type: string }
  /billing/checkout-session:
    post:
      summary: Create Stripe checkout session
      tags: [Billing]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan: { type: string, enum: [core, premium] }
                success_url: { type: string, format: uri }
                cancel_url: { type: string, format: uri }
              required: [plan, success_url, cancel_url]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id: { type: string }
                  checkout_url: { type: string, format: uri }
  /checkout/callback:
    get:
      summary: Checkout callback
      tags: [Billing]
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [success, cancel] }
        - in: query
          name: session_id
          schema: { type: string }
      responses:
        "302":
          description: Redirect to app with status
  /webhooks/stripe:
    post:
      summary: Stripe webhook receiver
      tags: [Billing]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        "200": { description: Received, content: { application/json: { schema: { type: object, properties: { received: { type: boolean } } } } } }
  /newsletter/subscribe:
    post:
      summary: Subscribe to newsletter
      tags: [Email]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NewsletterSubscribe" }
      responses:
        "200": { description: OK, content: { application/json: { schema: { type: object, properties: { subscribed: { type: boolean } } } } } }
  /emails/summary/generate:
    post:
      summary: Trigger monthly summary email
      tags: [Email]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                period_start: { type: string, format: date }
                period_end: { type: string, format: date }
              required: [period_start, period_end]
      responses:
        "202": { description: Accepted, content: { application/json: { schema: { type: object, properties: { job_id: { type: string } } } } } }
  /support/contact:
    post:
      summary: Create support ticket
      tags: [Support]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SupportContact" }
      responses:
        "201": { description: Created, content: { application/json: { schema: { type: object, properties: { ticket_id: { type: string }, status: { type: string }, sla_hours: { type: integer } } } } } }
  /analytics/event:
    post:
      summary: Track analytics event (no PHI/PII)
      tags: [Analytics]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AnalyticsEvent" }
      responses:
        "204": { description: No Content }
  /community/ask-expert:
    post:
      summary: Submit Ask-an-Expert question
      tags: [Community]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question: { type: string }
                context:
                  type: object
                  additionalProperties: true
                privacy:
                  type: object
                  properties:
                    anonymous_handle: { type: boolean }
              required: [question]
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  case_id: { type: string }
                  status: { type: string }
                  expected_response_window_hours: { type: integer }
  /me/export:
    post:
      summary: Request data export
      tags: [Privacy]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formats:
                  type: array
                  items: { type: string, enum: [json, csv] }
                include:
                  type: array
                  items: { type: string, enum: [logs, insights] }
              required: [formats, include]
      responses:
        "202": { description: Accepted, content: { application/json: { schema: { type: object, properties: { export_id: { type: string }, status: { type: string } } } } } }
  /search/suggest:
    get:
      summary: Suggest search terms
      tags: [Search]
      security: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items: { type: string }